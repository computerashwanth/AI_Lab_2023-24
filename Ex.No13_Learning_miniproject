
# Ex.No: 13 
Brain Tumor Detection Using Deep Learning
### DATE: 13/05/2025                                                                           
### REGISTER NUMBER : 212222060021
### AIM: 
To design and implement a deep learning-based system for detecting brain tumors in MRI scans, with the goal of accurately classifying tumor types (glioma, meningioma, pituitary) and enabling early diagnosis to support medical decision-making.###  Algorithm:
##
# ALGORITHM:
Step1:Data Collection
  Gather brain MRI scans from public datasets (e.g., Figshare, BraTS)
  Include tumor types: Glioma, Meningioma, Pituitary, No Tumor

Step 2:Data Preprocessing
  Resize images to a fixed dimension (e.g., 224x224)
  Normalize pixel values (0-1 range)
  Apply data augmentation (rotation, flipping, zoom)

Step 3:Feature Selection
   Use CNN-based architectures (ResNet, VGG, EfficientNet)
   Extract deep features from MRI scans

Step 4:Label Definition
   Convolutional Neural Network (CNN)
   Transfer Learning (ResNet50, VGG16)
   Custom CNN Architecture

Step 5:Model Selection
   Split data into Train (80%), Validation (10%), Test (10%)
   Use Adam optimizer with learning rate scheduling
   Apply Early Stopping to prevent overfitting

Step 6:Model Training
   Accuracy, Precision, Recall, F1-Score
   Confusion Matrix
   ROC-AUC Curve

Step 7:Model Evaluation
   Gradio/Flask Web Interface
   Mobile App Integration

### Program:

#Maintest.py:
import cv2
from keras.models import load_model
from PIL import Image
import numpy as np

model=load_model('BrainTumor10EpochsCategorical.h5')

image=cv2.imread(r'"C:\Users\SEC\Desktop\Brain tumor\Brain tumor\pred\pred10.jpg"')

img=Image.fromarray(image)

img=img.resize((64,64))

img=np.array(img)

input_img=np.expand_dims(img, axis=0)

result=model.predict(input_img)
threshold = 0.5

# Convert probability values to binary decision
binary_prediction = 1 if result[0, 1] > threshold else 0

print(binary_prediction)
if(binary_prediction==1):
    {
        print("THE MRI SCAN IS DETECTED WITH TUMOR\nHope your recovery is short,sweet and strong.")
    }
else:
    {
        print("THIS MRI SCAN DOES NOT HAVE TUMOR\nGOOD TO GO :)")  
    }

#Maintrain.py:
import cv2
import os
import tensorflow as tf
from tensorflow import keras
from PIL import Image
import numpy as np
from sklearn.model_selection import train_test_split
from keras.utils import normalize
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D
from keras.layers import Activation, Dropout, Flatten, Dense
from keras.utils import to_categorical
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score



image_directory='data/'
no_tumor_images=os.listdir(image_directory+ 'no/')
yes_tumor_images=os.listdir(image_directory+ 'yes/')
dataset=[]
label=[]

INPUT_SIZE=64
# print(no_tumor_images)

# path='no0.jpg'

# print(path.split('.')[1])

for i , image_name in enumerate(no_tumor_images):
    if(image_name.split('.')[1]=='jpg'):
        image=cv2.imread(image_directory+'no/'+image_name)
        image=Image.fromarray(image,'RGB')
        image=image.resize((INPUT_SIZE,INPUT_SIZE))
        dataset.append(np.array(image))
        label.append(0)

for i , image_name in enumerate(yes_tumor_images):
    if(image_name.split('.')[1]=='jpg'):
        image=cv2.imread(image_directory+'yes/'+image_name)
        image=Image.fromarray(image, 'RGB')
        image=image.resize((INPUT_SIZE,INPUT_SIZE))
        dataset.append(np.array(image))
        label.append(1)

dataset=np.array(dataset)
label=np.array(label)


x_train, x_test, y_train, y_test=train_test_split(dataset, label, test_size=0.2, random_state=0)

# Reshape = (n, image_width, image_height, n_channel)

# print(x_train.shape)
# print(y_train.shape)

# print(x_test.shape)
# print(y_test.shape)

x_train=normalize(x_train, axis=1)
x_test=normalize(x_test, axis=1)

y_train=to_categorical(y_train , num_classes=2)
y_test=to_categorical(y_test , num_classes=2)



# Model Building
# 64,64,3

model=Sequential()

model.add(Conv2D(32, (3,3), input_shape=(INPUT_SIZE, INPUT_SIZE, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Conv2D(32, (3,3), kernel_initializer='he_uniform'))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))


model.add(Conv2D(64, (3,3), kernel_initializer='he_uniform'))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Flatten())
model.add(Dense(64))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(2))
model.add(Activation('softmax'))


# Binary CrossEntropy= 1, sigmoid
# Categorical Cross Entryopy= 2 , softmax

model.compile(loss='categorical_crossentropy',optimizer='adam', metrics=['accuracy'])


model.fit(x_train, y_train, 
batch_size=16, 
verbose=1, epochs=10, 
validation_data=(x_test, y_test),
shuffle=False)

model.save('BrainTumor10EpochsCategorical.h5')


_, accuracy = model.evaluate(x_test, y_test, verbose=0)
print(f'Test Accuracy: {accuracy * 100:.2f}%')

# Make predictions on the test set
y_pred = model.predict(x_test)

# Convert predicted probabilities to binary decisions
y_pred_binary = np.argmax(y_pred, axis=1)

# Convert true labels to binary decisions
y_true_binary = np.argmax(y_test, axis=1)

# Compute and print precision, recall, and F1 score
precision = precision_score(y_true_binary, y_pred_binary)
recall = recall_score(y_true_binary, y_pred_binary)
f1 = f1_score(y_true_binary, y_pred_binary)

print(f'Precision: {precision:.4f}')
print(f'Recall: {recall:.4f}')
print(f'F1 Score: {f1:.4f}')







=.

#app.py:
from flask import Flask, render_template, request, send_file
import cv2
from keras.models import load_model
from PIL import Image
import numpy as np
import os
import base64
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score


app = Flask(__name__, template_folder=os.path.join(os.path.dirname(os.path.abspath(__file__)), 'Template'))

# Load the pre-trained model
model = load_model('BrainTumor10EpochsCategorical.h5')
threshold = 0.5

@app.route('/', methods=['GET', 'POST'])
def index():
    prediction = None
    error_message = None
    uploaded_image = None

    if request.method == 'POST':
        # Get the uploaded image file
        file = request.files.get('file')

        if not file:
            error_message = 'No file selected'
        else:
            try:
                # Read the image
                image = cv2.imdecode(np.frombuffer(file.read(), np.uint8), cv2.IMREAD_COLOR)

                # Preprocess the image
                img = Image.fromarray(image)
                img = img.resize((64, 64))
                img = np.array(img)
                input_img = np.expand_dims(img, axis=0)

                # Make prediction
                result = model.predict(input_img)

                # Convert probability values to binary decision
                binary_prediction = 1 if result[0, 1] > threshold else 0

                # Set the prediction result
                prediction = "Brain Tumor" if binary_prediction == 1 else "No Brain Tumor"

                # Convert the image to base64 for displaying in HTML
                _, buffer = cv2.imencode('.jpg', image)
                encoded_image = base64.b64encode(buffer).decode('utf-8')
                uploaded_image = f"data:image/jpeg;base64,{encoded_image}"

            except cv2.error as e:
                error_message = 'Error processing the image'
                print(f"CV2 Error: {e}")
            except Exception as e:
                error_message = 'An error occurred'
                print(f"Error: {e}")

    return render_template('index.html', prediction=prediction, error_message=error_message, uploaded_image=uploaded_image,)


if __name__ == '__main__':
    app.run(debug=True)

### Output:
### Result:
The deep learning model successfully classified brain tumors with 93% accuracy.
